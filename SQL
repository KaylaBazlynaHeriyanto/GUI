import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import java.sql.*;

public class Main extends JFrame {
    private JTextField namaField, NIMField;
    private JComboBox<String> ProdiField, JurusanField;
    private JButton addButton, displayButton, deleteData;
    private JTable table;

    private final String[] prodiOptions = {"Sistem Informasi", "Teknik Informatika"};
    private final String[] jurusanSIOptions = {"Sistem Informasi", "Teknologi Informasi", "Pendidikan Teknologi Informasi"};
    private final String[] jurusanTIFOptions = {"Teknik Informatika", "Teknik Komputer"};

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                Main db = new Main();
                db.createAndShowGUI();
            }
        });
    }

    public void createAndShowGUI() {
        JFrame frame = new JFrame("Data Mahasiswa FILKOM");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setLayout(null);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        JLabel namaLabel = new JLabel("Nama:");
        namaLabel.setBounds(20, 20, 80, 25);
        frame.add(namaLabel);

        namaField = new JTextField();
        namaField.setBounds(100, 20, 320, 25);
        frame.add(namaField);

        JLabel NIMLabel = new JLabel("NIM:");
        NIMLabel.setBounds(20, 50, 80, 25);
        frame.add(NIMLabel);

        NIMField = new JTextField();
        NIMField.setBounds(100, 50, 320, 25);
        frame.add(NIMField);

        JLabel ProdiLabel = new JLabel("Prodi:");
        ProdiLabel.setBounds(20, 80, 80, 25);
        frame.add(ProdiLabel);

        ProdiField = new JComboBox<>(prodiOptions);
        ProdiField.setBounds(100, 80, 320, 25);
        frame.add(ProdiField);

        JLabel JurusanLabel = new JLabel("Jurusan:");
        JurusanLabel.setBounds(20, 110, 80, 25);
        frame.add(JurusanLabel);

        JurusanField = new JComboBox<>(jurusanSIOptions);
        JurusanField.setBounds(100, 110, 320, 25);
        frame.add(JurusanField);

        ProdiField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateJurusanField();
            }
        });

        addButton = new JButton("Simpan");
        addButton.setBounds(100, 140, 80, 25);
        addButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addUser();
            }
        });
        frame.add(addButton);

        deleteData = new JButton("Hapus");
        deleteData.setBounds(200, 140, 80, 25);
        deleteData.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow == -1) {
                    JOptionPane.showMessageDialog(Main.this, "Pilih Satu Tabel Untuk Dihapus", "",
                            JOptionPane.WARNING_MESSAGE);
                } else {
                    int id = (int) table.getValueAt(selectedRow, 0);
                    deleteData(id);
                }
            }
        });
        frame.add(deleteData);

        displayButton = new JButton("Data Mahasiswa");
        displayButton.setBounds(300, 140, 120, 25);
        displayButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                displayUsers();
            }
        });
        frame.add(displayButton);

        String[] columnNames = {"Nomor", "Nama", "NIM", "Prodi", "Jurusan"};
        DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(20, 180, 760, 250);
        frame.add(scrollPane);

        frame.setVisible(true);
    }

    private void updateJurusanField() {
        String selectedProdi = (String) ProdiField.getSelectedItem();
        JurusanField.removeAllItems();
        if ("Sistem Informasi".equals(selectedProdi)) {
            for (String jurusan : jurusanSIOptions) {
                JurusanField.addItem(jurusan);
            }
        } else if ("Teknik Informatika".equals(selectedProdi)) {
            for (String jurusan : jurusanTIFOptions) {
                JurusanField.addItem(jurusan);
            }
        }
    }

    private void deleteData(int id) {
        int option = JOptionPane.showConfirmDialog(this, "Data Ini Akan Dihapus", "",
                JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            String sql = "DELETE FROM mahasiswa WHERE id = ?";
            Connection conn = DatabaseConnection.getConnection();
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setInt(1, id);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Data Dihapus");
                displayUsers();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Data Belum Terhapus");
            }
        }
    }

    private void addUser() {
        String nama = namaField.getText();
        String nimText = NIMField.getText();
        String prodi = (String) ProdiField.getSelectedItem();
        String jurusan = (String) JurusanField.getSelectedItem();

        int nim;
        try {
            nim = Integer.parseInt(nimText);
        } catch (NumberFormatException ex) {
            JPanel panel = new JPanel();
            JLabel label = new JLabel("Format Salah", SwingConstants.CENTER);
            panel.add(label);
            JOptionPane.showMessageDialog(null, panel, "Error", JOptionPane.PLAIN_MESSAGE);
            return;
        }

        int option = JOptionPane.showConfirmDialog(this, "Tambahkan Data Mahasiswa Berikut?\nNama: " + nama
                        + "\nNIM: " + nim + "\nProdi: " + prodi + "\nJurusan: " + jurusan, "Konfirmasi",
                JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            Connection conn = DatabaseConnection.getConnection();
            if (conn != null) {
                try {
                    String query = "INSERT INTO mahasiswa (nama, nim, prodi, jurusan) VALUES (?, ?, ?, ?)";
                    PreparedStatement preparedStatement = conn.prepareStatement(query);
                    preparedStatement.setString(1, nama);
                    preparedStatement.setInt(2, nim);
                    preparedStatement.setString(3, prodi);
                    preparedStatement.setString(4, jurusan);
                    preparedStatement.executeUpdate();
                    JOptionPane.showMessageDialog(this, "Data Mahasiswa Berhasil Ditambahkan.");
                    displayUsers(); // Refresh data
                } catch (SQLException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Data Mahasiswa Gagal Ditambahkan");
                }
            }
        }
    }

    private void displayUsers() {
        Connection conn = DatabaseConnection.getConnection();
        if (conn != null) {
            try {
                String query = "SELECT id, nama, nim, prodi, jurusan FROM mahasiswa";
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                DefaultTableModel tableModel = (DefaultTableModel) table.getModel();
                tableModel.setRowCount(0);
                while (rs.next()) {
                    int id = rs.getInt("id");
                    String nama = rs.getString("nama");
                    int nim = rs.getInt("nim");
                    String prodi = rs.getString("prodi");
                    String jurusan = rs.getString("jurusan");
                    tableModel.addRow(new Object[]{id, nama, nim, prodi, jurusan});
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    static class DatabaseConnection {
        private static final String URL = "jdbc:mysql://127.0.0.1:3306/pemlan";
        private static final String USER = "root";
        private static final String PASSWORD = "Kaylabazlyna10_";

        public static Connection getConnection() {
            try {
                return DriverManager.getConnection(URL, USER, PASSWORD);
            } catch (SQLException e) {
                e.printStackTrace();
                return null;
            }
        }
    }
}
